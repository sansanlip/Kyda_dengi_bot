import telebot
import json
import time
import threading
from datetime import datetime, timedelta
from telebot.types import ReplyKeyboardMarkup

TOKEN = "7655454535:AAEmhdfP1shVkHHyVervaPwdTZFX9HjvQjc"
bot = telebot.TeleBot(TOKEN)

DATA_FILE = 'data.json'

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
data = {
    "expenses": {},
    "reminders": {},
    "last_reminder_time": {},
    "goals": {}
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    global data
    try:
        with open(DATA_FILE, 'r') as f:
            data = json.load(f)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ datetime
            for chat_id in data["expenses"]:
                data["expenses"][chat_id] = [
                    (datetime.fromisoformat(e[0]), e[1], e[2]) for e in data["expenses"][chat_id]
                ]
    except Exception:
        pass

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    to_save = {
        "expenses": {},
        "reminders": data["reminders"],
        "last_reminder_time": data["last_reminder_time"],
        "goals": data["goals"]
    }
    for chat_id in data["expenses"]:
        to_save["expenses"][chat_id] = [
            (e[0].isoformat(), e[1], e[2]) for e in data["expenses"][chat_id]
        ]
    with open(DATA_FILE, 'w') as f:
        json.dump(to_save, f, indent=2)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üí∞ –í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥", "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤")
    keyboard.add("üéØ –¶–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    return keyboard

def get_expense_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üçé –ü—Ä–æ–¥—É–∫—Ç—ã", "üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üíä –ó–¥–æ—Ä–æ–≤—å–µ")
    keyboard.add("üõç –õ–∏—á–Ω–æ–µ", "üéâ –û—Ç–¥—ã—Ö", "üè† –î–æ–º", "üìö –û–±—É—á–µ–Ω–∏–µ", "üì¶ –ü–æ–¥–ø–∏—Å–∫–∏")
    keyboard.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return keyboard

def get_reminder_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üîî –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞", "üïí –£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è")
    keyboard.add("üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return keyboard

def get_view_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÜ –ù–µ–¥–µ–ª—è", "üìÖ –ú–µ—Å—è—Ü")
    keyboard.add("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ üí∞", reply_markup=get_main_keyboard())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(func=lambda m: m.text in ["üí∞ –í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥", "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤", "üéØ –¶–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"])
def main_menu(message):
    if message.text == "üí∞ –í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_expense_keyboard())
    elif message.text == "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=get_view_keyboard())
    elif message.text == "üéØ –¶–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å—É–º–º—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, save_goal)
    elif message.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=get_reminder_keyboard())

# –¶–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
def save_goal(message):
    try:
        goal = float(message.text)
        data["goals"][str(message.chat.id)] = goal
        save_data()
        bot.send_message(message.chat.id, f"–¶–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {goal} ‚ÇΩ", reply_markup=get_main_keyboard())
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

# –í–Ω–µ—Å–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
@bot.message_handler(func=lambda m: m.text in ["üçé –ü—Ä–æ–¥—É–∫—Ç—ã", "üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üíä –ó–¥–æ—Ä–æ–≤—å–µ", "üõç –õ–∏—á–Ω–æ–µ", "üéâ –û—Ç–¥—ã—Ö", "üè† –î–æ–º", "üìö –û–±—É—á–µ–Ω–∏–µ", "üì¶ –ü–æ–¥–ø–∏—Å–∫–∏"])
def ask_expense(message):
    category = message.text
    bot.send_message(message.chat.id, f"–°–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ {category}?")
    bot.register_next_step_handler(message, lambda m: save_expense(m, category))

def save_expense(message, category):
    try:
        amount = float(message.text)
        chat_id = str(message.chat.id)
        if chat_id not in data["expenses"]:
            data["expenses"][chat_id] = []
        data["expenses"][chat_id].append((datetime.now(), category, amount))
        save_data()
        bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} ‚ÇΩ –Ω–∞ {category}", reply_markup=get_main_keyboard())
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤
@bot.message_handler(func=lambda m: m.text in ["üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÜ –ù–µ–¥–µ–ª—è", "üìÖ –ú–µ—Å—è—Ü"])
def view_expenses(message):
    chat_id = str(message.chat.id)
    now = datetime.now()
    expenses = data["expenses"].get(chat_id, [])

    if message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        start = now.replace(hour=0, minute=0, second=0)
    elif message.text == "üìÜ –ù–µ–¥–µ–ª—è":
        start = now - timedelta(days=7)
    else:
        start = now - timedelta(days=30)

    filtered = [e for e in expenses if e[0] >= start]
    total = sum(e[2] for e in filtered)
    lines = [f"{e[0].strftime('%d.%m %H:%M')} ‚Äî {e[1]}: {e[2]} ‚ÇΩ" for e in filtered]
    goal = data["goals"].get(chat_id)
    msg = "\n".join(lines) + f"\n\nüí∞ –í—Å–µ–≥–æ: {total} ‚ÇΩ"
    if goal:
        msg += f"\nüéØ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: {max(0, goal - total)} ‚ÇΩ"
    bot.send_message(message.chat.id, msg, reply_markup=get_main_keyboard())

# –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥
@bot.message_handler(func=lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π")
def delete_last(message):
    chat_id = str(message.chat.id)
    if chat_id in data["expenses"] and data["expenses"][chat_id]:
        deleted = data["expenses"][chat_id].pop()
        save_data()
        bot.send_message(message.chat.id, f"–£–¥–∞–ª–µ–Ω–æ: {deleted[1]} - {deleted[2]} ‚ÇΩ")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@bot.message_handler(func=lambda m: m.text == "üîî –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞")
def set_reminder(message):
    chat_id = str(message.chat.id)
    data["reminders"][chat_id] = 3
    data["last_reminder_time"][chat_id] = datetime.now().isoformat()
    save_data()
    bot.send_message(message.chat.id, "–ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ üí¨", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda m: m.text == "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
def disable_reminder(message):
    chat_id = str(message.chat.id)
    data["reminders"].pop(chat_id, None)
    data["last_reminder_time"].pop(chat_id, None)
    save_data()
    bot.send_message(message.chat.id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã", reply_markup=get_main_keyboard())

# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def reminder_thread():
    while True:
        now = datetime.now()
        for chat_id, hours in data["reminders"].items():
            last_time_str = data["last_reminder_time"].get(chat_id)
            if not last_time_str:
                continue
            last_time = datetime.fromisoformat(last_time_str)
            if now - last_time >= timedelta(hours=hours):
                bot.send_message(chat_id, "‚è∞ –ù–∞–ø–æ–º–Ω–∏ —Å–µ–±–µ –≤–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã!")
                data["last_reminder_time"][chat_id] = now.isoformat()
                save_data()
        time.sleep(60)

# –ó–∞–ø—É—Å–∫
load_data()
threading.Thread(target=reminder_thread, daemon=True).start()
bot.polling(none_stop=True)